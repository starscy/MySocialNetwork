{"version":3,"file":"static/js/796.265beff8.chunk.js","mappings":"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","sources":["components/profile/posts/Posts.jsx","components/profile/posts/PostsPage.jsx","components/profile/posts/PostContainer.jsx","webpack://react-start/./src/components/profile/profile/ProfileInfo.module.css?eece","components/profile/profile/ProfileStatus.jsx","components/profile/profile/ProfileInfo.jsx","components/profile/ProfilePage.jsx","components/profile/ProfilePageContainer.jsx"],"sourcesContent":["import React from \"react\";\r\n\r\nconst Posts = (posts) => {\r\n  return (\r\n    <div>\r\n      {[...posts.posts].reverse().map((post) => (\r\n        <div key={post.id}>\r\n          <h2>{post.title}</h2>\r\n          <p>{post.body}</p>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Posts;\r\n","import React, { createRef, useRef } from \"react\";\r\nimport Posts from \"./Posts\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport { maxLength, required } from \"../../utils/validators/validators\";\r\nimport MyInput from \"../../UI/input/MyInput\";\r\n\r\nconst maxLength100 = maxLength(100);\r\nconst postPostsForm = (props) => {\r\n  // const { handleSubmit } = props;\r\n\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <Field\r\n        name=\"post\"\r\n        component={MyInput}\r\n        type=\"text\"\r\n        validate={[required, maxLength100]}\r\n      />\r\n      <button type=\"submit\">Отправить пост</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst PostPostsReduxForm = reduxForm({ form: \"postForm\" })(postPostsForm);\r\n\r\nconst PostsPage = (props) => {\r\n  const postPost = (post) => {\r\n    props.addPostThunk(post);\r\n  };\r\n  return (\r\n    <div>\r\n      <PostPostsReduxForm onSubmit={postPost} />\r\n      <Posts posts={props.posts.posts} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostsPage;\r\n","import { connect } from \"react-redux\";\r\nimport { addPostThunk } from \"../../../redux/reducers/profileReducer\";\r\nimport PostsPage from \"./PostsPage\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    posts: state.ProfilePage,\r\n  };\r\n};\r\n\r\nconst PostContainer = connect(mapStateToProps, {\r\n  addPostThunk,\r\n})(PostsPage);\r\n\r\nexport default PostContainer;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"main\":\"ProfileInfo_main__xNBcV\",\"lookingForJob\":\"ProfileInfo_lookingForJob__jRzFO\"};","import React from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\n\r\nconst ProfileStatus = (props) => {\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [statusInput, setStatusInput] = useState(props.status);\r\n  const editStatus = () => {\r\n    setEditMode(true);\r\n  };\r\n  const disableEditMode = () => {\r\n    setEditMode(false);\r\n    props.updateStatusThunk(statusInput);\r\n  };\r\n  const handleChanger = (e) => {\r\n    setStatusInput(e.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setStatusInput(props.status);\r\n  }, [props.status]);\r\n\r\n  return (\r\n    <div>\r\n      {!editMode && (\r\n        <div>\r\n          <h4 onClick={editStatus}>{props.status || \"no status\"}</h4>\r\n        </div>\r\n      )}\r\n\r\n      {editMode && (\r\n        <div>\r\n          <input\r\n            value={statusInput}\r\n            autoFocus={true}\r\n            onBlur={disableEditMode}\r\n            onChange={handleChanger}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileStatus;\r\n","import React from \"react\";\r\nimport Preloader from \"../../UI/preloader/Preloader\";\r\nimport cl from \"../profile/ProfileInfo.module.css\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\n\r\nconst ProfileInfo = ({ userProfile, updateStatusThunk, status }) => {\r\n  if (!userProfile) {\r\n    return <Preloader />;\r\n  }\r\n\r\n  return (\r\n    <div className={cl.main}>\r\n      <img src={userProfile.photos.small} alt=\"user ava\" />\r\n      <ProfileStatus\r\n        userProfile={userProfile}\r\n        updateStatusThunk={updateStatusThunk}\r\n        status={status}\r\n      />\r\n      <p>Имя пользователя:</p>\r\n      <h2>{userProfile.fullName}</h2>\r\n      <p>\"{userProfile.aboutMe}\"</p>\r\n      <div>\r\n        {userProfile.lookingForAJob ? (\r\n          <div className={cl.lookingForJob} data-title=\"Ищет работу\">\r\n            <img src=\"./img/lookingForJob.gif\" alt=\"lookingForJob.gif\" />\r\n          </div>\r\n        ) : (\r\n          <p>Не ищу работу</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileInfo;\r\n","import React from \"react\";\r\nimport PostContainer from \"./posts/PostContainer\";\r\nimport ProfileInfo from \"./profile/ProfileInfo\";\r\n\r\nconst ProfilePage = ({ userProfile, updateStatusThunk, status, ...props }) => {\r\n  return (\r\n    <div>\r\n      <ProfileInfo\r\n        userProfile={userProfile}\r\n        updateStatusThunk={updateStatusThunk}\r\n        status={status}\r\n      />\r\n      <PostContainer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfilePage;\r\n","import React from \"react\";\r\nimport {\r\n  setProfileInfo,\r\n  toggleFetching,\r\n  setProfileInfoThunk,\r\n  getStatusThunk,\r\n  updateStatusThunk,\r\n} from \"../../redux/reducers/profileReducer\";\r\nimport ProfilePage from \"./ProfilePage\";\r\nimport { connect } from \"react-redux\";\r\nimport { useLocation, useNavigate, useParams } from \"react-router-dom\";\r\nimport { compose } from \"redux\";\r\n\r\nfunction withRouter(Component) {\r\n  function ComponentWithRouterProp(props) {\r\n    let location = useLocation();\r\n    let navigate = useNavigate();\r\n    let params = useParams();\r\n    return <Component {...props} router={{ location, navigate, params }} />;\r\n  }\r\n\r\n  return ComponentWithRouterProp;\r\n}\r\n\r\nclass ProfilePageContainer extends React.Component {\r\n  componentDidMount() {\r\n    let userId = this.props.router.params.userId;\r\n\r\n    if (!userId) {\r\n      userId = this.props.authorizedUserId;\r\n    }\r\n    this.props.setProfileInfoThunk(userId);\r\n    this.props.getStatusThunk(userId);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <ProfilePage {...this.props} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userProfile: state.ProfilePage.userProfile,\r\n    isFetching: state.ProfilePage.isFetching,\r\n    status: state.ProfilePage.status,\r\n    authorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth,\r\n  };\r\n};\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, {\r\n    setProfileInfo,\r\n    toggleFetching,\r\n    setProfileInfoThunk,\r\n    getStatusThunk,\r\n    updateStatusThunk,\r\n  }),\r\n  // withAuthRedirect,\r\n  withRouter\r\n)(ProfilePageContainer);\r\n"],"names":["posts","reverse","map","post","title","body","id","maxLength100","maxLength","PostPostsReduxForm","reduxForm","form","props","onSubmit","handleSubmit","Field","name","component","MyInput","type","validate","required","addPostThunk","connect","state","ProfilePage","PostsPage","useState","editMode","setEditMode","status","statusInput","setStatusInput","useEffect","onClick","value","autoFocus","onBlur","updateStatusThunk","onChange","e","target","userProfile","className","cl","src","photos","small","alt","fullName","aboutMe","lookingForAJob","Preloader","ProfilePageContainer","userId","this","router","params","authorizedUserId","setProfileInfoThunk","getStatusThunk","React","compose","isFetching","auth","isAuth","setProfileInfo","toggleFetching","Component","location","useLocation","navigate","useNavigate","useParams"],"sourceRoot":""}